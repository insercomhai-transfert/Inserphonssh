{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "6dde42bb-29e2-47d6-b27f-84bbbe368b12",
            "version": "KqlParameterItem/1.0",
            "name": "param_host_selected",
            "type": 1,
            "value": "",
            "isHiddenWhenLocked": true
          },
          {
            "id": "bda7f049-cc56-490b-92ae-312186700540",
            "version": "KqlParameterItem/1.0",
            "name": "param_tab_main",
            "type": 1,
            "value": "1",
            "isHiddenWhenLocked": true
          },
          {
            "id": "731f3dea-e655-4c54-8db1-79e6d4691709",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_error",
            "type": 1,
            "query": "// 0 = no error\n// 1 = table does not exist (need to add provider)\n// 2 = table exists, but column v1 does not (need to wait)\n// 3 = table exists, column v1 too, but not column v2 (need to upgrade)\n// 4 = table exists, column v1 and column v2 as well, but no records (need to wait)\nlet t = \"SapHana_LoadHistory_CL\";\nlet c1 = \"HOST_s\";\nlet c2 = \"PROVIDER_INSTANCE_s\";\nlet dummy = \"unmÃ¶glicher-wert!\";\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, columnV2 = dummy, records = -1 };\nlet checkRecords =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | summarize records = count()\n    )\n  | project records\n  | top 1 by records desc\n;\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | count\n      | extend miss = 0\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\nlet checkColumnExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | extend miss = 0\n      | extend columnV1 = column_ifexists(c1, dummy)\n      | extend columnV2 = column_ifexists(c2, dummy)\n    )\n  | project miss, columnV1, columnV2\n  | limit 2\n | top 1 by miss asc\n;\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != \"1\");\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\nlet columnV2Exists = toscalar(checkColumnExists | summarize max(columnV2) != dummy);\nlet tableRecords = toscalar(checkRecords | summarize max(records));\nlet x = iif(tableExists, iif(columnV1Exists, iif(columnV2Exists, iif(tableRecords > 0, \"0\", \"2\"), \"3\"), \"2\"), \"1\");\nprint toscalar(x)\n//print tableExists, columnV1Exists, columnV2Exists, tableRecords\n",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "90198a7b-268a-4cd1-99a7-639c1446a43a",
            "version": "KqlParameterItem/1.0",
            "name": "param_sid",
            "type": 1,
            "value": "*",
            "isHiddenWhenLocked": true
          },
          {
            "id": "9bb6ef85-604b-4f6b-a924-387ff17cc06a",
            "version": "KqlParameterItem/1.0",
            "name": "param_ams_resource",
            "type": 5,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.hanaonazure/sapmonitors": true
              },
              "additionalResourceOptions": [
                "value::1"
              ]
            },
            "defaultValue": "value::1"
          },
          {
            "id": "b863a1f6-91bf-4dfd-937e-6157ec103e81",
            "version": "KqlParameterItem/1.0",
            "name": "param_providers",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{param_ams_resource}/providerInstances/\",\"urlParams\":[{\"key\":\"api-version\",\"value\":\"2020-02-07-preview\"},{\"key\":\"pageLimit\",\"value\":\"1000\"}],\"batchDisabled\":false,\"transformers\":null}",
            "queryType": 12
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "dummy_neverset",
        "comparison": "isNotEqualTo"
      },
      "name": "section_params"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Before you can use this workbook, you need to add an SAP HANA Provider.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "text_error1"
          },
          {
            "type": 1,
            "content": {
              "json": "Initial ingestion in progress: After adding an SAP HANA Provider, it may take a few minutes for metrics to show up.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "text_error2"
          },
          {
            "type": 1,
            "content": {
              "json": "This workbook requires a newer version of SAP Monitor. Please consider upgrading by deleting and re-creating this SAP Monitor.",
              "style": "upsell"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error",
              "comparison": "isEqualTo",
              "value": "3"
            },
            "name": "text_error3"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "param_check_error",
        "comparison": "isNotEqualTo"
      },
      "name": "group_error"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let allHanaProvidersfromSrc =\nprint allProviders=parse_json(tostring(\"{param_providers:escapejson}\")).value\n| mv-expand allProviders\n| extend type=parse_json(allProviders.properties).type\n| extend state=parse_json(allProviders.properties).provisioningState\n| where type==\"SapHana\"\n| where state!=\"Failed\"\n| extend hostname=parse_json(tostring(parse_json(allProviders.properties).properties)).hanaHostname\n| project allProviders.name,hostname,type,state\n;\n\nlet allHanaProviders = \nallHanaProvidersfromSrc\n| project-rename provider=allProviders_name,hostname,type\n;\nlet latestProvider = SapHana_SystemOverview_CL\n| summarize arg_max(TimeGenerated, *) by PROVIDER_INSTANCE_s\n;\nlet retrievedProviders =\nlatestProvider\n| join (SapHana_SystemOverview_CL | where NAME_s == \"Instance ID\" | extend sid = VALUE_s)\n    on PROVIDER_INSTANCE_s\n| summarize count() by sid, PROVIDER_INSTANCE_s\n| join (SapHana_SystemOverview_CL | where NAME_s == \"Instance Number\" | extend num = VALUE_s)\n    on PROVIDER_INSTANCE_s\n| summarize count() by sid, num, PROVIDER_INSTANCE_s\n| join (SapHana_SystemOverview_CL | where NAME_s == \"Version\" | extend version_raw = VALUE_s, \".\")\n    on PROVIDER_INSTANCE_s\n| summarize count() by sid, num, version_raw, PROVIDER_INSTANCE_s\n| join (SapHana_SystemOverview_CL | where NAME_s == \"Distributed\" | extend distributed = iff(VALUE_s == \"No\", \"Single-node\", replace(@'Yes (.*)', @'Multi-node \\1', VALUE_s)))\n    on PROVIDER_INSTANCE_s\n| summarize count() by sid, num, version_raw, distributed, PROVIDER_INSTANCE_s\n| extend provider = PROVIDER_INSTANCE_s\n| extend version_split = split(version_raw, \".\")\n| extend version = strcat(\"SAP HANA \", version_split[0], \".\", version_split[1], \".\", version_split[2])\n| project provider, sid, num, version, distributed\n\n//| sort by sid asc\n;\nallHanaProviders\n|extend provider=tostring(provider)\n| join kind=leftouter (retrievedProviders) on provider\n| extend sid=iif(isempty(sid),\"--\",sid)\n| extend num=iif(isempty(num),\"--\",num)\n| extend sid_num = strcat(sid, \" / \", num)\n| extend version=iif(isempty(version),\"--\",version)\n| extend providername = strcat(\"Provider\", \": \", provider)\n| project provider, providername, sid, num, sid_num, version, distributed\n| sort by provider asc",
        "size": 3,
        "title": "Monitored SAP HANA instances",
        "noDataMessage": "There are currently no SAP HANA providers configured.",
        "exportFieldName": "sid",
        "exportParameterName": "param_sid",
        "exportDefaultValue": "*",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "sid_num",
            "formatter": 1
          },
          "subtitleContent": {
            "columnMatch": "providername",
            "formatter": 1
          },
          "secondaryContent": {
            "columnMatch": "distributed",
            "formatter": 2
          },
          "showBorder": true,
          "sortCriteriaField": "sid_num",
          "sortOrderField": 1
        }
      },
      "conditionalVisibility": {
        "parameterName": "param_check_error",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "query_sid"
    },
    {
      "type": 1,
      "content": {
        "json": "\n\n---\n<b style=\"color:DodgerBlue;\">You selected host:</b> {param_host_selected}<br>\n<b style=\"color:DodgerBlue;\">You selected instance:</b> {param_sid}"
      },
      "conditionalVisibility": {
        "parameterName": "dummy_neverset",
        "comparison": "isNotEqualTo"
      },
      "name": "text_overview"
    },
    {
      "type": 1,
      "content": {
        "json": "Please select an SAP HANA instance from above to see more details.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_sid",
          "comparison": "isEqualTo",
          "value": "*"
        },
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "text_selectsid"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "fef3090d-335d-4d9f-a2a1-b8d23da2613d",
                  "cellValue": "param_tab_main",
                  "linkTarget": "parameter",
                  "linkLabel": "Overview",
                  "subTarget": "1",
                  "style": "link"
                },
                {
                  "id": "08589593-29a6-40e7-b140-6b6aba1902ed",
                  "cellValue": "param_tab_main",
                  "linkTarget": "parameter",
                  "linkLabel": "Utilization",
                  "subTarget": "2",
                  "style": "link"
                },
                {
                  "id": "f425221b-993a-416e-bf92-164aca2fa62e",
                  "cellValue": "param_tab_main",
                  "linkTarget": "parameter",
                  "linkLabel": "Backup",
                  "subTarget": "3",
                  "style": "link"
                },
                {
                  "id": "29869640-96cc-4e86-b3ce-d5ca40391aed",
                  "cellValue": "param_tab_main",
                  "linkTarget": "parameter",
                  "linkLabel": "Replication",
                  "subTarget": "4",
                  "style": "link"
                }
              ]
            },
            "name": "tabs_main"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "2718717f-e363-4010-8feb-1aadda6387c3",
                        "version": "KqlParameterItem/1.0",
                        "name": "param_timeframe",
                        "label": "Timeframe",
                        "type": 4,
                        "isRequired": true,
                        "value": {
                          "durationMs": 14400000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 300000
                            },
                            {
                              "durationMs": 900000
                            },
                            {
                              "durationMs": 1800000
                            },
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 14400000
                            },
                            {
                              "durationMs": 43200000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 172800000
                            }
                          ]
                        }
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "section_timeframe"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nlet table_hostconfig = SapHana_HostConfig_CL\n| where TimeGenerated > ago(24h)\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| extend timestamp_hostconfig = TimeGenerated\n| extend host = tostring(HOST_s)\n| extend role = tolower(INDEXSERVER_ACTUAL_ROLE_s)\n| extend active = tolower(HOST_ACTIVE_s)\n| summarize arg_max(timestamp_hostconfig, *) by provider, host\n| sort by host asc\n| project timestamp_hostconfig, host, role, active\n;\nlet table_load_host = SapHana_LoadHistory_CL\n| extend timestamp_load = TimeGenerated\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| extend host = HOST_s\n| extend cpu = CPU_d\n| extend memory = MEMORY_USED_d / MEMORY_SIZE_d * 100\n| extend nw_in = NETWORK_IN_d\n| extend nw_out = NETWORK_OUT_d\n| join kind=inner (table_hostconfig | where active == \"yes\") on host\n| where timestamp_load {param_timeframe}\n;\nlet table_highest_cpu = table_load_host\n| make-series avg(cpu) default=0 on timestamp_load step {param_timeframe:grain} by host\n| extend value = todouble(series_stats_dynamic(avg_cpu)['avg'])\n| extend timeseries = avg_cpu\n| sort by value desc\n| extend type = \"Highest CPU\"\n| project host, value, timeseries, type\n| take 1\n;\nlet table_highest_memory = table_load_host\n| make-series avg(memory) default=0 on timestamp_load step {param_timeframe:grain} by host\n| extend value = todouble(series_stats_dynamic(avg_memory)['avg'])\n| extend timeseries = avg_memory\n| sort by value desc\n| extend type = \"Highest Memory\"\n| project host, value, timeseries, type\n| take 1\n;\ntable_highest_cpu\n| union table_highest_memory\n| sort by type asc",
                    "size": 3,
                    "title": "Servers with most load",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "type",
                        "formatter": 1
                      },
                      "subtitleContent": {
                        "columnMatch": "host",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "value",
                        "formatter": 12,
                        "formatOptions": {
                          "min": 0,
                          "max": 100,
                          "palette": "greenRed"
                        },
                        "numberFormat": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "minimumFractionDigits": 1,
                            "maximumFractionDigits": 1
                          }
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "timeseries",
                        "formatter": 21,
                        "formatOptions": {
                          "min": 0,
                          "max": 100,
                          "palette": "blue"
                        }
                      },
                      "showBorder": false
                    }
                  },
                  "showPin": false,
                  "name": "query_busiest"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nlet table_hostconfig = SapHana_HostConfig_CL\n| where TimeGenerated > ago(24h)\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| extend timestamp_hostconfig = TimeGenerated\n| extend host = tostring(HOST_s)\n| extend role = tolower(INDEXSERVER_ACTUAL_ROLE_s)\n| extend active = tolower(HOST_ACTIVE_s)\n| summarize arg_max(timestamp_hostconfig, *) by provider, host\n| sort by host asc\n| project timestamp_hostconfig, host, role, active\n;\nlet table_load_host = SapHana_LoadHistory_CL\n| extend timestamp_load = TimeGenerated\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| extend host = HOST_s\n| extend cpu = CPU_d\n| extend memory = MEMORY_USED_d / MEMORY_SIZE_d * 100\n| extend nw_in = NETWORK_IN_d\n| extend nw_out = NETWORK_OUT_d\n| join kind=inner (table_hostconfig | where active == \"yes\") on host\n| where timestamp_load {param_timeframe} //>= timestamp_hostconfig - 5m\n| project cpu, memory, nw_in, nw_out, provider, host\n| summarize cpu=avg(cpu), memory=avg(memory), nw_in=avg(nw_in), nw_out=avg(nw_out) by provider, host\n;\nlet table_systemavailability = SapHana_SystemAvailability_CL\n| where TimeGenerated > ago(365d)\n| extend timestamp_systemavailability = TimeGenerated\n| extend provider = PROVIDER_INSTANCE_s\n| extend host = HOST_s\n| extend database = DATABASE_NAME_s\n| extend service = SERVICE_NAME_s\n| extend port = PORT_d\n| extend event = tostring(EVENT_NAME_s)\n| extend active = tolower(SERVICE_ACTIVE_s)\n| join kind=leftouter (table_systemoverview) on provider\n| join kind=rightouter (table_hostconfig | where active == \"yes\") on host\n| where sid != \"\" and port != 0\n| summarize arg_max(timestamp_systemavailability, *) by sid, host, database, service\n| project sid, host, database, service, event, port, active\n;\nlet table_disks = SapHana_Disks_CL\n| extend timestamp_disks = TimeGenerated\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| extend host = HOST_s\n| extend type = USAGE_TYPE_s\n| extend disk_usage = USED_SIZE_d / TOTAL_SIZE_d * 100\n| where type in (\"DATA\", \"LOG\")\n| join kind=inner (table_hostconfig | where active == \"yes\") on host\n| where timestamp_disks {param_timeframe} //>= timestamp_hostconfig - 10m\n| summarize disk_usage=avg(disk_usage) by provider, host, type\n;\ntable_hostconfig\n| extend name = host\n| extend id = host\n| extend type = \"Host\", parentid = \"\"\n| join kind=leftouter (table_load_host | project host, cpu, memory, nw_in, nw_out) on host \n| join kind=leftouter (table_disks | project host, disk_usage, type | where type == \"DATA\" | extend disk_data = disk_usage) on host\n| join kind=leftouter (table_disks | project host, disk_usage, type | where type == \"LOG\" | extend disk_log = disk_usage) on host\n| union (table_systemavailability\n| project sid, port, host, service, database, active, event\n| where sid == param_sid\n| summarize by host, service, database, port, active, event\n| extend type = \"Service\"\n| extend name = strcat(service, \" (:\", tostring(toint(port)), \")\")\n| extend parentid = host, id = strcat(host, \"_\", service)\n)\n| order by host asc, database asc\n| project name, host, type, database, role, active, event, cpu, memory, disk_data, disk_log, nw_in, nw_out, id, parentid",
                    "size": 3,
                    "title": "Instance overview",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "host",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "active",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "yes",
                                "representation": "success",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "no",
                                "representation": "4",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "pending",
                                "text": ""
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "event",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "cpu",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "greenRed"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        {
                          "columnMatch": "memory",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "greenRed"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        {
                          "columnMatch": "disk_data",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "greenRed"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        {
                          "columnMatch": "disk_log",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "greenRed"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        {
                          "columnMatch": "nw_in",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 1000,
                            "palette": "greenRed"
                          },
                          "numberFormat": {
                            "unit": 47,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        {
                          "columnMatch": "nw_out",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 1000,
                            "palette": "greenRed"
                          },
                          "numberFormat": {
                            "unit": 47,
                            "options": {
                              "style": "decimal",
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        {
                          "columnMatch": "id",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "parentid",
                          "formatter": 5,
                          "formatOptions": {}
                        }
                      ],
                      "filter": true,
                      "hierarchySettings": {
                        "idColumn": "id",
                        "parentColumn": "parentid",
                        "treeType": 0,
                        "expanderColumn": "name",
                        "expandTopLevel": false
                      },
                      "labelSettings": [
                        {
                          "columnId": "name",
                          "label": ""
                        },
                        {
                          "columnId": "host"
                        },
                        {
                          "columnId": "type",
                          "label": "Kind"
                        },
                        {
                          "columnId": "database",
                          "label": "Database"
                        },
                        {
                          "columnId": "role",
                          "label": "Role"
                        },
                        {
                          "columnId": "active",
                          "label": "Status"
                        },
                        {
                          "columnId": "event"
                        },
                        {
                          "columnId": "cpu",
                          "label": "CPU"
                        },
                        {
                          "columnId": "memory",
                          "label": "Memory"
                        },
                        {
                          "columnId": "disk_data",
                          "label": "Disk (Data)"
                        },
                        {
                          "columnId": "disk_log",
                          "label": "Disk (Log)"
                        },
                        {
                          "columnId": "nw_in",
                          "label": "NW (In)"
                        },
                        {
                          "columnId": "nw_out",
                          "label": "NW (Out)"
                        },
                        {
                          "columnId": "id"
                        },
                        {
                          "columnId": "parentid"
                        }
                      ]
                    }
                  },
                  "name": "query_overview"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let table_hostconfig = SapHana_HostConfig_CL\n| where TimeGenerated > ago(24h)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| extend host = tostring(HOST_s)\n| extend role = tolower(INDEXSERVER_ACTUAL_ROLE_s)\n| extend status = tolower(HOST_ACTIVE_s)\n| extend timestamp_hostconfig = TimeGenerated\n| summarize arg_max(timestamp_hostconfig, *) by provider, host\n| sort by timestamp_hostconfig, host asc\n| project timestamp_hostconfig, provider, host, role, status;\nlet table_services = SapHana_SystemAvailability_CL\n| extend database = DATABASE_NAME_s\n| extend provider = PROVIDER_INSTANCE_s\n| extend host = HOST_s\n| extend service = SERVICE_NAME_s\n| summarize arg_max(TimeGenerated, *) by provider, host, service;\nlet table_system = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(7d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider;\nlet table_load_current = SapHana_LoadHistory_CL\n| where TimeGenerated > ago(12h)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| extend host = tostring(HOST_s)\n| extend cpu = CPU_d\n| extend memory_used = MEMORY_USED_d\n| summarize arg_max(TimeGenerated, *) by provider, host\n| join kind=inner (table_hostconfig | where status == \"yes\" | where provider == provider) on host\n| sort by TimeGenerated\n| project provider, host, cpu, memory_used;\nlet table_cpu_5m = SapHana_LoadHistory_CL\n| where TimeGenerated > ago(24h)\n| extend timestamp_load = TimeGenerated\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| extend host = tostring(HOST_s)\n| extend cpu_5m = CPU_d\n| join kind=inner (table_hostconfig | where status == \"yes\" | where provider == provider) on host\n| where timestamp_load >= timestamp_hostconfig - 5m\n| project cpu_5m, provider, host\n| summarize avg(cpu_5m) by provider, host;\nlet table_cpu_15m = SapHana_LoadHistory_CL\n| where TimeGenerated > ago(24h)\n| extend timestamp_load = TimeGenerated\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| extend host = tostring(HOST_s)\n| extend cpu_15m = CPU_d\n| join kind=inner (table_hostconfig | where status == \"yes\" | where provider == provider) on host\n| where timestamp_load >= timestamp_hostconfig - 15m\n| project cpu_15m, provider, host\n| summarize avg(cpu_15m) by provider, host;\nlet table_memory_trend = SapHana_LoadHistory_CL\n| where TimeGenerated > ago(24h)\n| extend memory_used = MEMORY_USED_d / MEMORY_SIZE_d\n| extend provider = PROVIDER_INSTANCE_s\n| extend host = HOST_s\n| make-series avg(memory_used) default=0 on TimeGenerated from ago(24h) to now() step 30m by provider, host;\nlet table_cpu_trend = SapHana_LoadHistory_CL\n//| where TimeGenerated > ago(24h)\n| extend cpu = CPU_d\n| extend provider = PROVIDER_INSTANCE_s\n| extend host = HOST_s\n| make-series avg(cpu) default=0 on TimeGenerated from ago(24h) to now() step 30m by provider, host;\ntable_hostconfig\n| join kind=inner (table_system) on provider\n| join kind=leftouter (table_load_current | where provider == provider) on host\n| join kind=leftouter (table_cpu_trend | where provider == provider) on host\n| join kind=leftouter (table_memory_trend | where provider == provider) on host\n| extend instance = strcat(sid, \" (\", provider, \")\")\n| join kind=leftouter (table_cpu_5m | where provider == provider) on host\n| join kind=leftouter (table_cpu_15m | where provider == provider) on host\n//| join kind=inner (table_services | where provider == provider) on host \n| extend cpu_5m = avg_cpu_5m\n| extend cpu_15m = avg_cpu_15m\n| extend cpu_trend = avg_cpu\n| extend memory_current = memory_used\n| extend memory_trend = avg_memory_used\n| extend spacer = \"\"\n| sort by host asc\n| project instance, provider, host, role, status, cpu_5m, cpu_15m, cpu_trend, spacer, memory_current, memory_trend",
                    "size": 3,
                    "title": "Databases tenants and their hosts",
                    "noDataMessageStyle": 4,
                    "exportedParameters": [
                      {
                        "fieldName": "host",
                        "parameterName": "host_selected",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "",
                        "parameterName": "param_tab_main",
                        "parameterType": 1,
                        "defaultValue": "2"
                      }
                    ],
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "instance",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "provider",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "host",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "role",
                          "formatter": 1,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "yes",
                                "representation": "success",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "no",
                                "representation": "4",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "cpu_5m",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "max": 200,
                            "palette": "redBright"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        {
                          "columnMatch": "cpu_15m",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "max": 200,
                            "palette": "redBright"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        {
                          "columnMatch": "cpu_trend",
                          "formatter": 10,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "turquoise",
                            "aggregation": "Average"
                          },
                          "tooltipFormat": {
                            "tooltip": "CPU (trend)"
                          }
                        },
                        {
                          "columnMatch": "memory_current",
                          "formatter": 4,
                          "formatOptions": {
                            "palette": "purple",
                            "aggregation": "Sum"
                          },
                          "numberFormat": {
                            "unit": 38,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true,
                              "minimumFractionDigits": 2,
                              "maximumFractionDigits": 2
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "Memory (current)"
                          }
                        },
                        {
                          "columnMatch": "memory_trend",
                          "formatter": 10,
                          "formatOptions": {
                            "min": 0,
                            "max": 1,
                            "palette": "purple",
                            "aggregation": "Average"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "Memory (trend)"
                          }
                        },
                        {
                          "columnMatch": "cpu_1m",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "max": 200,
                            "palette": "redBright"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        {
                          "columnMatch": "cpu_current",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "turquoise",
                            "aggregation": "Average"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "CPU (current)"
                          }
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "instance"
                        ],
                        "expandTopLevel": true,
                        "finalBy": "host"
                      },
                      "sortBy": [
                        {
                          "itemKey": "$gen_group",
                          "sortOrder": 1
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "instance",
                          "label": "Host"
                        },
                        {
                          "columnId": "provider"
                        },
                        {
                          "columnId": "host"
                        },
                        {
                          "columnId": "role",
                          "label": "Role"
                        },
                        {
                          "columnId": "status",
                          "label": "Status"
                        },
                        {
                          "columnId": "cpu_5m",
                          "label": "CPU (5 minutes)",
                          "comment": "Shows the rolling CPU average over the last 5 minutes"
                        },
                        {
                          "columnId": "cpu_15m",
                          "label": "CPU (15 minutes)",
                          "comment": "Shows the rolling CPU average over the last 15 minutes"
                        },
                        {
                          "columnId": "cpu_trend",
                          "label": "CPU (trend)"
                        },
                        {
                          "columnId": "spacer",
                          "label": " "
                        },
                        {
                          "columnId": "memory_current",
                          "label": "Memory"
                        },
                        {
                          "columnId": "memory_trend",
                          "label": " Memory (trend)"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "$gen_group",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "param_tab_main",
                    "comparison": "isEqualTo",
                    "value": "99"
                  },
                  "showPin": true,
                  "name": "section_tree_overview",
                  "styleSettings": {
                    "progressStyle": "squares"
                  }
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "param_tab_main",
                "comparison": "isEqualTo",
                "value": "1"
              },
              {
                "parameterName": "param_sid",
                "comparison": "isNotEqualTo",
                "value": "*"
              }
            ],
            "name": "group_overview"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "cdc7ccf5-61a5-4ae4-8397-b35bdfa2a4da",
                        "version": "KqlParameterItem/1.0",
                        "name": "param_utilization_timerange",
                        "label": "Time range",
                        "type": 4,
                        "isRequired": true,
                        "value": {
                          "durationMs": 259200000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 172800000
                            },
                            {
                              "durationMs": 259200000
                            },
                            {
                              "durationMs": 604800000
                            },
                            {
                              "durationMs": 1209600000
                            },
                            {
                              "durationMs": 2592000000
                            }
                          ],
                          "allowCustom": true
                        }
                      },
                      {
                        "id": "378b2e15-9934-4755-b5ae-d7d0bfd26861",
                        "version": "KqlParameterItem/1.0",
                        "name": "param_utilization_type",
                        "label": "Type",
                        "type": 10,
                        "isRequired": true,
                        "typeSettings": {
                          "additionalResourceOptions": []
                        },
                        "jsonData": "[\n    { \"value\":\"cpu\", \"label\":\"CPU\", \"selected\":true },\n    { \"value\":\"memory\", \"label\":\"Memory\" }\n]"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "options_utilization_type",
                  "styleSettings": {
                    "padding": "10px"
                  }
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nSapHana_LoadHistory_CL\n| where TimeGenerated {param_utilization_timerange}\n| extend cpu = CPU_d\n| extend host = HOST_s\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| project TimeGenerated, host, cpu\n| summarize avg(cpu) by host, bin(TimeGenerated, {param_utilization_timerange:grain})\n",
                          "size": 4,
                          "aggregation": 2,
                          "showAnnotations": true,
                          "title": "CPU timeline",
                          "noDataMessage": "Please select valid filter criteria.",
                          "timeBrushParameterName": "param_utilization_timebrush",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "timechart",
                          "tileSettings": {
                            "showBorder": false,
                            "titleContent": {
                              "columnMatch": "HOST_s",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "avg_CPU_d",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "maximumSignificantDigits": 3,
                                  "maximumFractionDigits": 2
                                }
                              }
                            }
                          },
                          "chartSettings": {
                            "xAxis": "TimeGenerated",
                            "showMetrics": false,
                            "ySettings": {
                              "numberFormatSettings": {
                                "unit": 1,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": true,
                                  "maximumFractionDigits": 2
                                }
                              },
                              "min": 0,
                              "max": 100
                            }
                          }
                        },
                        "name": "query_small_cpu"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nSapHana_LoadHistory_CL\n| where TimeGenerated {param_utilization_timebrush}\n| extend cpu = CPU_d\n| extend host = HOST_s\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| project TimeGenerated, host, cpu\n| summarize avg(cpu) by host, bin(TimeGenerated, {param_utilization_timebrush:grain})",
                          "size": 3,
                          "aggregation": 2,
                          "title": "CPU detail",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "linechart",
                          "chartSettings": {
                            "xAxis": "TimeGenerated",
                            "group": "host",
                            "createOtherGroup": null,
                            "showLegend": true,
                            "ySettings": {
                              "numberFormatSettings": {
                                "unit": 1,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": true,
                                  "maximumFractionDigits": 2
                                }
                              },
                              "min": 0,
                              "max": 100
                            }
                          }
                        },
                        "name": "query_large_cpu"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "param_utilization_type",
                    "comparison": "isEqualTo",
                    "value": "cpu"
                  },
                  "name": "group_utilization_cpu"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nSapHana_LoadHistory_CL\n| where TimeGenerated {param_utilization_timerange}\n| extend memory_used = MEMORY_USED_d\n| extend memory_size = MEMORY_SIZE_d\n| extend host = HOST_s\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| project TimeGenerated, host, memory_used, memory_size\n| summarize avg(memory_used / memory_size * 100) by host, bin(TimeGenerated, {param_utilization_timerange:grain})\n",
                          "size": 4,
                          "aggregation": 2,
                          "showAnnotations": true,
                          "title": "Memory timeline",
                          "noDataMessage": "Please select valid filter criteria.",
                          "timeBrushParameterName": "param_utilization_memory_timebrush",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "linechart",
                          "tileSettings": {
                            "showBorder": false,
                            "titleContent": {
                              "columnMatch": "HOST_s",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "avg_CPU_d",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "maximumSignificantDigits": 3,
                                  "maximumFractionDigits": 2
                                }
                              }
                            }
                          },
                          "chartSettings": {
                            "xAxis": "TimeGenerated",
                            "showMetrics": false,
                            "showLegend": true,
                            "ySettings": {
                              "numberFormatSettings": {
                                "unit": 1,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": true,
                                  "maximumFractionDigits": 2
                                }
                              },
                              "min": 0,
                              "max": 100
                            }
                          }
                        },
                        "name": "query_small_cpu"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nSapHana_LoadHistory_CL\n| where TimeGenerated {param_utilization_memory_timebrush}\n| extend memory_used = MEMORY_USED_d\n| extend memory_size = MEMORY_SIZE_d\n| extend host = HOST_s\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| project TimeGenerated, host, memory_used, memory_size\n| summarize avg(memory_used) by host, bin(TimeGenerated, {param_utilization_memory_timebrush:grain})",
                          "size": 3,
                          "aggregation": 2,
                          "title": "Memory detail",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "linechart",
                          "chartSettings": {
                            "xAxis": "TimeGenerated",
                            "showLegend": true,
                            "ySettings": {
                              "numberFormatSettings": {
                                "unit": 38,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": true,
                                  "maximumFractionDigits": 2
                                }
                              },
                              "min": 0
                            }
                          }
                        },
                        "name": "query_large_cpu"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "param_utilization_type",
                    "comparison": "isEqualTo",
                    "value": "memory"
                  },
                  "name": "group_utilization_memory"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "param_tab_main",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "group_utilization"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "loadType": "always",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "2718717f-e363-4010-8feb-1aadda6387c3",
                        "version": "KqlParameterItem/1.0",
                        "name": "param_timeframe",
                        "label": "Timeframe",
                        "type": 4,
                        "isRequired": true,
                        "value": {
                          "durationMs": 3600000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 300000
                            },
                            {
                              "durationMs": 900000
                            },
                            {
                              "durationMs": 1800000
                            },
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 14400000
                            },
                            {
                              "durationMs": 43200000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 172800000
                            },
                            {
                              "durationMs": 259200000
                            },
                            {
                              "durationMs": 604800000
                            },
                            {
                              "durationMs": 1209600000
                            },
                            {
                              "durationMs": 2419200000
                            },
                            {
                              "durationMs": 2592000000
                            },
                            {
                              "durationMs": 5184000000
                            },
                            {
                              "durationMs": 7776000000
                            }
                          ],
                          "allowCustom": true
                        }
                      }
                    ],
                    "style": "pills",
                    "queryType": 8
                  },
                  "name": "section_timeframe"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let param_sid = \"{param_sid}\"\n;\nlet table_databases = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| extend backup_item = DATABASE_NAME_s\n| project backup_item\n| distinct backup_item\n| order by backup_item asc\n;\nlet table_lastbackup = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where ENTRY_TYPE_NAME_s <> \"log backup\"\n| summarize backup_id = max(BACKUP_ID_d) by parent_database = DATABASE_NAME_s\n| join (SapHana_BackupCatalog_CL)\n    on $left.backup_id == $right.BACKUP_ID_d\n| extend state_name = STATE_NAME_s,\n         backup_time = UTC_START_TIME_t\n| project parent_database,\n          backup_id,\n          state_name,\n          backup_time\n;\nlet table_lastlogbackup = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where ENTRY_TYPE_NAME_s == \"log backup\"\n| summarize backup_id = max(BACKUP_ID_d) by parent_database = DATABASE_NAME_s\n| join (SapHana_BackupCatalog_CL)\n    on $left.backup_id == $right.BACKUP_ID_d\n| extend last_log_backup_state_name = STATE_NAME_s,\n         last_log_backup_time = UTC_START_TIME_t\n| project parent_database,\n          backup_id,\n          last_log_backup_state_name,\n          last_log_backup_time\n;\nlet table_lastsuccessfulbackup = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"success\"\n| where ENTRY_TYPE_NAME_s <> \"log backup\"\n| summarize last_successful_backup_id = max(BACKUP_ID_d) by parent_database = DATABASE_NAME_s\n| join (SapHana_BackupCatalog_CL)\n    on $left.last_successful_backup_id == $right.BACKUP_ID_d\n| extend last_successful_backup_time = UTC_START_TIME_t\n| project parent_database,\n          last_successful_backup_id,\n          last_successful_backup_time\n;\nlet table_lastsuccessfullogbackup = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"success\"\n| where ENTRY_TYPE_NAME_s == \"log backup\"\n| summarize last_successful_log_backup_id = max(BACKUP_ID_d) by parent_database = DATABASE_NAME_s\n| join (SapHana_BackupCatalog_CL)\n    on $left.last_successful_log_backup_id == $right.BACKUP_ID_d\n| extend last_successful_log_backup_time = UTC_START_TIME_t\n| project parent_database,\n          last_successful_log_backup_id,\n          last_successful_log_backup_time\n;\nlet table_lastsuccessfulbackuptypestatus = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"success\"\n| summarize last_successful_backup_id = max(BACKUP_ID_d) by state_name = STATE_NAME_s, backup_item = ENTRY_TYPE_NAME_s, parent_database = DATABASE_NAME_s\n| join (SapHana_BackupCatalog_CL)\n    on $left.last_successful_backup_id == $right.BACKUP_ID_d\n| extend last_successful_backup_time = UTC_START_TIME_t,\n         parent_database = DATABASE_NAME_s\n| project parent_database,\n          last_successful_backup_id,\n          last_successful_backup_time,\n          backup_item\n;\nlet table_lastbackupbytypestatus = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| summarize backup_time = max(UTC_START_TIME_t), backup_id = max(BACKUP_ID_d) by backup_item = ENTRY_TYPE_NAME_s, state_name = STATE_NAME_s, parent_database = DATABASE_NAME_s\n;\nlet table_lastbackupbytype = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| summarize backup_id = max(BACKUP_ID_d) by backup_item = ENTRY_TYPE_NAME_s, parent_database = DATABASE_NAME_s\n;\nlet table_lastbackupbystatus = table_lastbackupbytype\n| join (table_lastbackupbytypestatus)\n    on $left.backup_id == $right.backup_id\n    and $left.parent_database == $right.parent_database\n;\nlet table_numberfailedbackupssummary = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"success\"\n| summarize Success = count(), Fail = 0, last_successful_backup_time = max(UTC_START_TIME_t) by parent_database = DATABASE_NAME_s\n| union (SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"fail\"\n| summarize Fail = count(), last_failed_backup_time = max(UTC_START_TIME_t) by parent_database = DATABASE_NAME_s)\n| summarize Success = coalesce(max(Success), 0), Fail = max(Fail), last_successful_backup_time = max(last_successful_backup_time), last_failed_backup_time = max(last_failed_backup_time) by parent_database\n| extend percentage_successful_backups = (todouble(Success) / todouble(Success + Fail)) * 100\n| extend number_failed_backups_text = strcat(Fail, ' out of ', toint(Success + Fail))\n;\nlet table_numberfailedbackupsbytype = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"success\"\n| summarize Success = count(), Fail = 0, last_successful_backup_time = max(UTC_START_TIME_t) by backup_type = ENTRY_TYPE_NAME_s, parent_database = DATABASE_NAME_s\n| union (SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"fail\"\n| summarize Fail = count(), last_failed_backup_time = max(UTC_START_TIME_t) by backup_type = ENTRY_TYPE_NAME_s, parent_database = DATABASE_NAME_s)\n| summarize Success = coalesce(max(Success), 0), Fail = max(Fail), last_successful_backup_time = max(last_successful_backup_time), last_failed_backup_time = max(last_failed_backup_time) by backup_type, parent_database\n| extend percentage_successful_backups = (todouble(Success) / todouble(Success + Fail)) * 100\n| extend number_failed_backups_text = strcat(Fail, ' out of ', toint(Success + Fail))\n;\nlet table_databasesummary = table_databases\n| join kind=leftouter (table_lastbackup)\n    on $left.backup_item == $right.parent_database\n| join kind=leftouter (table_lastlogbackup)\n    on $left.backup_item == $right.parent_database\n| join kind=leftouter (table_lastsuccessfulbackup)\n    on $left.backup_item == $right.parent_database\n| join kind=leftouter (table_lastsuccessfullogbackup)\n    on $left.backup_item == $right.parent_database\n| join (table_numberfailedbackupssummary)\n    on $left.backup_item == $right.parent_database\n| extend Id = backup_item,\n         last_status = coalesce(state_name, last_log_backup_state_name),\n         parent_database = '',\n         item_type = strcat(\"'*'\"),\n         database = backup_item,\n         no_filter = ''\n| project backup_item,\n          Id,\n          last_status,\n          number_failed_backups_text,\n          parent_database,\n          item_type,\n          database,\n          no_filter\n| order by parent_database desc\n;\nlet table_backupsummary = table_lastbackupbytypestatus\n| join (table_lastbackupbytype)\n    on $left.parent_database == $right.parent_database\n    and $left.backup_item == $right.backup_item\n    and $left.backup_id == $right.backup_id\n| join kind=leftouter (table_lastsuccessfulbackuptypestatus)\n    on $left.parent_database == $right.parent_database\n    and $left.backup_item == $right.backup_item\n| join (table_numberfailedbackupsbytype)\n    on $left.parent_database == $right.parent_database\n    and $left.backup_item == $right.backup_type\n| extend backup_item,\n         Id = strcat(parent_database, \"-\", tostring(backup_id)),\n         last_status = state_name,\n         last_status_time_minutes = toint((now() - backup_time) / 1m),\n         last_successful_backup_time_minutes = toint((now() - last_successful_backup_time) / 1m),\n         item_type = strcat(\"'\", backup_item, \"'\"),\n         database = parent_database,\n         no_filter = 'where BACKUP_ID_d > 0 //'\n| project backup_item,\n          Id,\n          last_status,\n          last_status_time_minutes,\n          last_successful_backup_time_minutes,\n          parent_database,\n          number_failed_backups_text,\n          item_type,\n          database,\n          no_filter\n| order by parent_database desc\n;\ntable_backupsummary\n| union table_databasesummary\n| order by backup_item asc\n",
                    "size": 3,
                    "title": "Backup Summary",
                    "timeContext": {
                      "durationMs": 3600000
                    },
                    "timeContextFromParameter": "param_timeframe",
                    "exportedParameters": [
                      {
                        "fieldName": "database",
                        "parameterName": "param_tenant",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "item_type",
                        "parameterName": "param_backuptype",
                        "parameterType": 1,
                        "defaultValue": ""
                      },
                      {
                        "fieldName": "no_filter",
                        "parameterName": "param_nologfilter",
                        "parameterType": 1
                      }
                    ],
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Id",
                          "formatter": 5,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        },
                        {
                          "columnMatch": "last_status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "fail",
                                "representation": "failed",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": ""
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "last_status_time_minutes",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 25,
                            "options": {
                              "style": "decimal",
                              "minimumIntegerDigits": 1,
                              "minimumFractionDigits": 0,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "last_successful_backup_time_minutes",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 25,
                            "options": {
                              "style": "decimal",
                              "minimumIntegerDigits": 1,
                              "minimumFractionDigits": 0,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "parent_database",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "number_failed_backups_text",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "startsWith",
                                "thresholdValue": "0",
                                "representation": "Blank",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "info",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "item_type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "database",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "no_filter",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "LastStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "fail",
                                "representation": "failed",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": ""
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AgeOfStatus",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 25,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "minimumIntegerDigits": 1,
                              "minimumFractionDigits": 0,
                              "maximumFractionDigits": 0
                            }
                          },
                          "dateFormat": {
                            "formatName": "fullDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "AgeOfSuccessBackupTime",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 25,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "minimumIntegerDigits": 1,
                              "minimumFractionDigits": 0,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "ParentDatabase",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "NumberFailedBackups",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "startsWith",
                                "thresholdValue": "0",
                                "representation": "Blank",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "1",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ItemType",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Database",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "NoFilter",
                          "formatter": 5
                        }
                      ],
                      "hierarchySettings": {
                        "idColumn": "Id",
                        "parentColumn": "parent_database",
                        "treeType": 0,
                        "expanderColumn": "backup_item"
                      },
                      "labelSettings": [
                        {
                          "columnId": "backup_item",
                          "label": "Backup item"
                        },
                        {
                          "columnId": "Id"
                        },
                        {
                          "columnId": "last_status",
                          "label": "Backup status"
                        },
                        {
                          "columnId": "last_status_time_minutes",
                          "label": "Backup age"
                        },
                        {
                          "columnId": "last_successful_backup_time_minutes",
                          "label": "Age of previous successful backup"
                        },
                        {
                          "columnId": "parent_database"
                        },
                        {
                          "columnId": "number_failed_backups_text",
                          "label": "Number of failed backups"
                        },
                        {
                          "columnId": "item_type"
                        },
                        {
                          "columnId": "database"
                        },
                        {
                          "columnId": "no_filter"
                        }
                      ]
                    }
                  },
                  "name": "query_backup_summary"
                },
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "566206fe-4f80-495c-b48b-45b345a89862",
                        "version": "KqlParameterItem/1.0",
                        "name": "param_backuptype_filter",
                        "label": "Show Log Backups",
                        "type": 10,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "typeSettings": {
                          "additionalResourceOptions": []
                        },
                        "jsonData": "[\n    { \"value\": \"where ENTRY_TYPE_NAME_s <> \\\"\\\"\", \"label\": \"True\", \"selected\": true },\n    { \"value\": \"where ENTRY_TYPE_NAME_s <> \\\"log backup\\\"\", \"label\":\"False\" }\n]",
                        "timeContext": {
                          "durationMs": 43200000
                        },
                        "timeContextFromParameter": "param_timeframe"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "customWidth": "0",
                  "conditionalVisibilities": [
                    {
                      "parameterName": "param_tenant",
                      "comparison": "isNotEqualTo"
                    },
                    {
                      "parameterName": "param_backuptype",
                      "comparison": "isEqualTo",
                      "value": "'*'"
                    }
                  ],
                  "name": "catalog_filter_params_logs"
                },
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "cf986647-1e6f-4863-8f66-d5b64889bcdd",
                        "version": "KqlParameterItem/1.0",
                        "name": "param_backupstate",
                        "label": "Backup State",
                        "type": 10,
                        "isRequired": true,
                        "query": "{\"version\":\"1.0.0\",\"content\":\"[\\n    { \\\"value\\\": \\\"'success','fail','successful','failed'\\\", \\\"label\\\": \\\"All\\\", \\\"selected\\\": true },\\n    { \\\"value\\\": \\\"'success','successful'\\\", \\\"label\\\":\\\"Successful\\\" },\\n    { \\\"value\\\": \\\"'fail','failed'\\\", \\\"label\\\":\\\"Failed\\\" }\\n]\",\"transformers\":null}",
                        "typeSettings": {
                          "additionalResourceOptions": []
                        },
                        "timeContext": {
                          "durationMs": 86400000
                        },
                        "queryType": 8
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "customWidth": "0",
                  "conditionalVisibility": {
                    "parameterName": "param_tenant",
                    "comparison": "isNotEqualTo"
                  },
                  "name": "catalog_filter_params_state"
                },
                {
                  "type": 1,
                  "content": {
                    "json": ""
                  },
                  "name": "buffer"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nlet nodata = datatable(end_time_utc:datetime,backup_type:string,database:string,backup_size_bytes:real,backup_duration_seconds:real,backup_id:real)\n[\n'1970-01-01 00:00:00',\"N\\\\A\",\"N\\\\A\",0,0,0,\n];\nSapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where DATABASE_NAME_s == param_tenant\n| where ENTRY_TYPE_NAME_s in ({param_backuptype}) or '*' in ({param_backuptype})\n| {param_nologfilter} {param_backuptype_filter}\n| where STATE_NAME_s in ({param_backupstate}) or '*' in ({param_backupstate})\n| extend end_time_utc = UTC_END_TIME_t,\n         backup_type = ENTRY_TYPE_NAME_s,\n         database = DATABASE_NAME_s,\n         backup_size_bytes = BACKUP_SIZE_BYTES_d,\n         backup_duration_seconds = TIME_ELAPSED_SECONDS_d,\n         backup_id = BACKUP_ID_d\n| project end_time_utc, backup_type, database, backup_size_bytes, backup_duration_seconds, backup_id\n| distinct *\n| union isfuzzy=true nodata | where database <> \"N\\\\A\"",
                    "size": 0,
                    "title": "Backup Size",
                    "timeContext": {
                      "durationMs": 3600000
                    },
                    "timeContextFromParameter": "param_timeframe",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "categoricalbar",
                    "chartSettings": {
                      "xAxis": "end_time_utc",
                      "yAxis": [
                        "backup_size_bytes"
                      ],
                      "group": "backup_type",
                      "createOtherGroup": null,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "log backup",
                          "color": "blue"
                        }
                      ],
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 36,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true,
                            "maximumFractionDigits": 2
                          }
                        }
                      }
                    }
                  },
                  "customWidth": "50",
                  "conditionalVisibilities": [
                    {
                      "parameterName": "param_tenant",
                      "comparison": "isNotEqualTo"
                    },
                    {
                      "parameterName": "param_backuptype",
                      "comparison": "isNotEqualTo",
                      "value": "'data snapshot'"
                    }
                  ],
                  "showPin": false,
                  "name": "query_backup_size",
                  "styleSettings": {
                    "margin": "2%"
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nlet nodata = datatable(end_time_utc:datetime,backup_type:string,database:string,backup_size_bytes:real,backup_duration_seconds:real,backup_id:real)\n[\n'1970-01-01 00:00:00',\"N\\\\A\",\"N\\\\A\",0,0,0,\n];\nSapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where DATABASE_NAME_s == param_tenant\n| where ENTRY_TYPE_NAME_s in ({param_backuptype}) or '*' in ({param_backuptype})\n| {param_nologfilter} {param_backuptype_filter}\n| where STATE_NAME_s in ({param_backupstate}) or '*' in ({param_backupstate})\n| extend end_time_utc = UTC_END_TIME_t,\n         backup_type = ENTRY_TYPE_NAME_s,\n         database = DATABASE_NAME_s,\n         backup_size_bytes = BACKUP_SIZE_BYTES_d,\n         backup_duration_seconds = TIME_ELAPSED_SECONDS_d,\n         backup_id = BACKUP_ID_d\n| project end_time_utc, backup_type, database, backup_size_bytes, backup_duration_seconds, backup_id\n| distinct *\n| union isfuzzy=true nodata | where database <> \"N\\\\A\"",
                    "size": 0,
                    "aggregation": 3,
                    "title": "Backup Duration",
                    "timeContext": {
                      "durationMs": 3600000
                    },
                    "timeContextFromParameter": "param_timeframe",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "categoricalbar",
                    "chartSettings": {
                      "xAxis": "end_time_utc",
                      "yAxis": [
                        "backup_duration_seconds"
                      ],
                      "group": "backup_type",
                      "createOtherGroup": null,
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 24,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true,
                            "maximumFractionDigits": 2
                          }
                        }
                      }
                    }
                  },
                  "customWidth": "50",
                  "conditionalVisibility": {
                    "parameterName": "param_tenant",
                    "comparison": "isNotEqualTo"
                  },
                  "showPin": false,
                  "name": "query_backup_duration",
                  "styleSettings": {
                    "margin": "2%"
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nSapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid \n| where UTC_END_TIME_t {param_timeframe}\n| where DATABASE_NAME_s == param_tenant\n| where STATE_NAME_s in ({param_backupstate}) or '*' in ({param_backupstate})\n| where ENTRY_TYPE_NAME_s in ({param_backuptype}) or '*' in ({param_backuptype})\n| {param_nologfilter} {param_backuptype_filter}\n| extend\n  status = case(STATE_NAME_s == \"successful\", \"success\", STATE_NAME_s == \"failed\", \"fail\", STATE_NAME_s),\n  backup_type=ENTRY_TYPE_NAME_s,\n  database=DATABASE_NAME_s,\n  start_time_utc=UTC_START_TIME_t,\n  end_time_utc=UTC_END_TIME_t,\n  duration_hms = format_timespan(TIME_ELAPSED_SECONDS_d * 1s,'hh:mm:ss'),\n  backup_size_bytes = BACKUP_SIZE_BYTES_d,\n  backup_rate_kbps = BACKUP_RATE_KBYTES_PER_SECOND_d,\n  message = Message,\n  backup_id = BACKUP_ID_d,\n  number_of_files = NUMBER_OF_FILES_d\n| project status, backup_type, database, start_time_utc, end_time_utc, duration_hms, backup_size_bytes, backup_rate_kbps, message, backup_id, number_of_files\n| distinct *\n| order by end_time_utc desc",
                    "size": 0,
                    "title": "Backup Catalog",
                    "timeContext": {
                      "durationMs": 3600000
                    },
                    "timeContextFromParameter": "param_timeframe",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "fail",
                                "representation": "failed",
                                "text": "Fail"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "Success"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "backup_type",
                          "formatter": 1,
                          "formatOptions": {
                            "linkTarget": "GenericDetails",
                            "linkIsContextBlade": true
                          }
                        },
                        {
                          "columnMatch": "database",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "start_time_utc",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "end_time_utc",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "duration_hms",
                          "formatter": 4,
                          "formatOptions": {
                            "palette": "blue"
                          }
                        },
                        {
                          "columnMatch": "backup_size_bytes",
                          "formatter": 4,
                          "formatOptions": {
                            "palette": "blue"
                          },
                          "numberFormat": {
                            "unit": 36,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 2
                            },
                            "emptyValCustomText": "No data for this backup type"
                          }
                        },
                        {
                          "columnMatch": "backup_rate_kbps",
                          "formatter": 4,
                          "formatOptions": {
                            "palette": "blue"
                          },
                          "numberFormat": {
                            "unit": 46,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 2
                            },
                            "emptyValCustomText": "No data for this backup type"
                          }
                        },
                        {
                          "columnMatch": "message",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "backup_id",
                          "formatter": 1,
                          "formatOptions": {
                            "linkTarget": "GenericDetails",
                            "linkIsContextBlade": true
                          }
                        },
                        {
                          "columnMatch": "number_of_files",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "fail",
                                "representation": "failed",
                                "text": "Fail"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "Success"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ENTRY_TYPE_NAME_s",
                          "formatter": 1,
                          "formatOptions": {
                            "linkTarget": "GenericDetails",
                            "linkIsContextBlade": true
                          }
                        },
                        {
                          "columnMatch": "UTC_START_TIME_t",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "UTC_END_TIME_t",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "Duration",
                          "formatter": 4,
                          "formatOptions": {
                            "palette": "blue"
                          }
                        },
                        {
                          "columnMatch": "BACKUP_SIZE_BYTES_d",
                          "formatter": 4,
                          "formatOptions": {
                            "palette": "blue"
                          },
                          "numberFormat": {
                            "unit": 2,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        },
                        {
                          "columnMatch": "BACKUP_RATE_KBYTES_PER_SECOND_d",
                          "formatter": 4,
                          "formatOptions": {
                            "palette": "gray"
                          },
                          "numberFormat": {
                            "unit": 12,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "BACKUP_ID_d",
                          "formatter": 1,
                          "formatOptions": {
                            "linkTarget": "GenericDetails",
                            "linkIsContextBlade": true
                          },
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        },
                        {
                          "columnMatch": "TIME_ELAPSED_SECONDS_d",
                          "formatter": 4,
                          "formatOptions": {
                            "palette": "blue"
                          },
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        }
                      ],
                      "rowLimit": 2500,
                      "labelSettings": [
                        {
                          "columnId": "status",
                          "label": "Status"
                        },
                        {
                          "columnId": "backup_type",
                          "label": "Backup type"
                        },
                        {
                          "columnId": "database",
                          "label": "Database"
                        },
                        {
                          "columnId": "start_time_utc",
                          "label": "Start time"
                        },
                        {
                          "columnId": "end_time_utc",
                          "label": "End time"
                        },
                        {
                          "columnId": "duration_hms",
                          "label": "Duration"
                        },
                        {
                          "columnId": "backup_size_bytes",
                          "label": "Backup size"
                        },
                        {
                          "columnId": "backup_rate_kbps",
                          "label": "Rate"
                        },
                        {
                          "columnId": "message",
                          "label": "Message"
                        },
                        {
                          "columnId": "backup_id",
                          "label": "Backup ID"
                        },
                        {
                          "columnId": "number_of_files",
                          "label": "Number of files"
                        }
                      ]
                    },
                    "sortBy": [],
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "type",
                        "formatter": 1,
                        "formatOptions": {}
                      },
                      "subtitleContent": {
                        "columnMatch": "host",
                        "formatter": 1,
                        "formatOptions": {}
                      },
                      "leftContent": {
                        "columnMatch": "value",
                        "formatter": 12,
                        "formatOptions": {
                          "min": 0,
                          "max": 100,
                          "palette": "greenRed"
                        },
                        "numberFormat": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "minimumFractionDigits": 1,
                            "maximumFractionDigits": 1
                          }
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "timeseries",
                        "formatter": 21,
                        "formatOptions": {
                          "min": 0,
                          "max": 100,
                          "palette": "blue"
                        }
                      },
                      "showBorder": true
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "param_tenant",
                    "comparison": "isNotEqualTo"
                  },
                  "showPin": false,
                  "name": "query_backup_catalog"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "param_tab_main",
                "comparison": "isEqualTo",
                "value": "3"
              },
              {
                "parameterName": "param_sid",
                "comparison": "isNotEqualTo",
                "value": "*"
              }
            ],
            "name": "group_backup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "4a9b43cc-8ed8-4551-8112-658b341acf5b",
                        "version": "KqlParameterItem/1.0",
                        "name": "param_check_hsrdata",
                        "type": 1,
                        "query": "let MissingTable = view () { print miss = \"1\", sid = \"\", records = -1 };\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(\"SapHana_SystemReplication_CL\")\n      | extend sid = column_ifexists(\"SYSTEM_ID_s\", \"\")\n      | extend miss = \"0\"\n      | where sid == \"{param_sid}\"\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\ncheckTableExists",
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                          "durationMs": 86400000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "param_replication"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "System replication does not appear to be configured on this instance.",
                    "style": "warning"
                  },
                  "conditionalVisibility": {
                    "parameterName": "param_check_hsrdata",
                    "comparison": "isNotEqualTo",
                    "value": "0"
                  },
                  "name": "text_nohsr"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "title": "Replication relationships by replication site name (click to expand)",
                          "expandable": true,
                          "expanded": true,
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let param_sid = \"{param_sid}\"\r\n;\r\n// Filter the base data set to only work with the selected SID\r\nlet table_systemreplication = SapHana_SystemReplication_CL\r\n| where SYSTEM_ID_s == param_sid\r\n;\r\n// Find the latest post for this instance\r\nlet table_lastpost = table_systemreplication\r\n| summarize lastpost = max(TimeGenerated)\r\n| project lastpost\r\n;\r\n// Create table of the last posts for this instance\r\nlet table_hsrlastpost = table_systemreplication\r\n| join kind=inner (table_lastpost) \r\n  on  $left.TimeGenerated == $right.lastpost\r\n;\r\n//create a table with the primary site\r\nlet table_primarysite = table_hsrlastpost \r\n| distinct  \r\n    SITE_NAME_s\r\n| project  \r\n    NodeID = SITE_NAME_s,\r\n    SourceID = '',\r\n    TargetID = '',\r\n    CentreContent = SITE_NAME_s, \r\n    EdgeLabel = '', \r\n    TopContent = 'Primary'\r\n;\r\n// create a table with the secondary sites\r\nlet table_secondarysite = table_hsrlastpost \r\n| summarize\r\n   TIME_DIFF_SECONDS_d = avg(TIME_DIFF_SECONDS_d),\r\n   OPERATION_MODE_s = max(OPERATION_MODE_s),\r\n   REPLICATION_MODE_s = max(REPLICATION_MODE_s),\r\n   SYSTEM_REPLICATION_STATUS_s = max(SYSTEM_REPLICATION_STATUS_s)\r\n  by\r\n  SITE_NAME_s,\r\n   SECONDARY_SITE_NAME_s\r\n| project  \r\n   NodeID = SECONDARY_SITE_NAME_s,\r\n   SourceID = SITE_NAME_s,\r\n   TargetID = SECONDARY_SITE_NAME_s,\r\n   CentreContent = SECONDARY_SITE_NAME_s,\r\n   EdgeLabel = strcat( iif(SYSTEM_REPLICATION_STATUS_s == 'ACTIVE', '🟢', '🟥'), ' ', SYSTEM_REPLICATION_STATUS_s, ' - ', REPLICATION_MODE_s, ' with ',OPERATION_MODE_s), \r\n   TopContent = 'Secondary'\r\n;\r\n// join the two together\r\ntable_primarysite\r\n| union table_secondarysite\r\n| order by NodeID asc",
                                "size": 3,
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "graph",
                                "graphSettings": {
                                  "type": 0,
                                  "topContent": {
                                    "columnMatch": "TopContent"
                                  },
                                  "leftContent": {
                                    "columnMatch": "LeftContent_real",
                                    "formatter": 5,
                                    "numberFormat": {
                                      "unit": 24,
                                      "options": {
                                        "style": "decimal",
                                        "useGrouping": false
                                      }
                                    },
                                    "tooltipFormat": {
                                      "tooltip": "This replication target is currently {0} behind the replication source"
                                    }
                                  },
                                  "centerContent": {
                                    "columnMatch": "CentreContent"
                                  },
                                  "rightContent": {
                                    "columnMatch": "RightContent",
                                    "formatter": 5
                                  },
                                  "bottomContent": {
                                    "columnMatch": "BottomContent",
                                    "formatter": 5
                                  },
                                  "nodeIdField": "NodeID",
                                  "sourceIdField": "SourceID",
                                  "targetIdField": "TargetID",
                                  "edgeSize": "EdgeSize",
                                  "edgeLabel": "EdgeLabel",
                                  "nodeSize": {
                                    "sizeField": "NodeSize",
                                    "minSize": 100,
                                    "maxSize": 200
                                  },
                                  "staticNodeSize": 100,
                                  "colorSettings": {
                                    "nodeColorField": "TopContent",
                                    "type": 1,
                                    "colorPalette": "default"
                                  },
                                  "hivesMargin": 5
                                }
                              },
                              "customWidth": "80",
                              "name": "Cluster-node-graph-topology"
                            }
                          ]
                        },
                        "name": "group_graph_view"
                      },
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "parameters": [
                            {
                              "id": "7d25d955-502f-483f-83dd-5a1ae98bf43b",
                              "version": "KqlParameterItem/1.0",
                              "name": "param_timeframe",
                              "label": "Timeframe",
                              "type": 4,
                              "isRequired": true,
                              "value": {
                                "durationMs": 259200000
                              },
                              "typeSettings": {
                                "selectableValues": [
                                  {
                                    "durationMs": 300000
                                  },
                                  {
                                    "durationMs": 900000
                                  },
                                  {
                                    "durationMs": 1800000
                                  },
                                  {
                                    "durationMs": 3600000
                                  },
                                  {
                                    "durationMs": 14400000
                                  },
                                  {
                                    "durationMs": 43200000
                                  },
                                  {
                                    "durationMs": 86400000
                                  },
                                  {
                                    "durationMs": 172800000
                                  },
                                  {
                                    "durationMs": 259200000
                                  },
                                  {
                                    "durationMs": 604800000
                                  },
                                  {
                                    "durationMs": 1209600000
                                  },
                                  {
                                    "durationMs": 2419200000
                                  },
                                  {
                                    "durationMs": 2592000000
                                  },
                                  {
                                    "durationMs": 5184000000
                                  },
                                  {
                                    "durationMs": 7776000000
                                  }
                                ]
                              },
                              "timeContext": {
                                "durationMs": 86400000
                              }
                            }
                          ],
                          "style": "pills",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces"
                        },
                        "name": "parameters - 2"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemreplication = SapHana_SystemReplication_CL\n| where SYSTEM_ID_s == param_sid\n| where TimeGenerated {param_timeframe}\n;\nlet table_lastpost = table_systemreplication\n| summarize last_post = max(TimeGenerated)\n| project last_post\n;\nlet table_hsrlastpost = table_systemreplication\n| join kind=inner (table_lastpost)\n    on $left.TimeGenerated == $right.last_post\n;\nlet table_tsreplicationtimediffbyservice = table_systemreplication\n| make-series ts_max_time_diff_seconds = max(TIME_DIFF_SECONDS_d) default=0 on TimeGenerated step {param_timeframe:grain} by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s \n;\nlet table_tsreplicationasyncbuffbyservice = table_systemreplication\n| make-series ts_max_async_buff_mb = max(ASYNC_BUFF_USED_MB_d) default=0 on TimeGenerated step {param_timeframe:grain} by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s \n;\nlet table_tsreplicationtimediffbyhost = table_systemreplication\n| make-series ts_max_time_diff_seconds = max(TIME_DIFF_SECONDS_d) default=0 on TimeGenerated step {param_timeframe:grain} by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s \n;\nlet table_tsreplicationasyncbuffbyhost = table_systemreplication\n| make-series ts_max_async_buff_mb = max(ASYNC_BUFF_USED_MB_d) default=0 on TimeGenerated step {param_timeframe:grain} by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s\n;\nlet table_lastreplicationpostbyservice = table_hsrlastpost\n| summarize last_post = max(TimeGenerated) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s\n;\nlet table_maxreplicationpostbyservice = table_systemreplication\n| summarize last_post = max(TimeGenerated), max_time_diff_seconds = max(TIME_DIFF_SECONDS_d), max_async_buff_used_mb = max(ASYNC_BUFF_USED_MB_d) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s\n;\nlet table_replicationmetricsbyservice = table_hsrlastpost\n| extend async_buff_used_mb = ASYNC_BUFF_USED_MB_d,\n         time_diff_seconds = TIME_DIFF_SECONDS_d\n| project last_post,\n          DATABASE_NAME_s,\n          HOST_s,\n          SECONDARY_HOST_s,\n          SITE_NAME_s,\n          SECONDARY_SITE_NAME_s,\n          SERVICE_NAME_s,\n          SHIPPED_LOG_POSITION_TIME_t,\n          REPLAYED_LOG_POSITION_TIME_t,\n          async_buff_used_mb,\n          time_diff_seconds\n;\nlet table_replicationmetricsbydb = table_replicationmetricsbyservice\n| summarize last_post = max(last_post), async_buff_used_mb = sum(async_buff_used_mb), time_diff_seconds = max(time_diff_seconds) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s\n;\nlet table_lastreplicationbystatusbyservice = table_hsrlastpost\n| summarize last_post = max(TimeGenerated) by DATABASE_NAME_s, SYSTEM_REPLICATION_STATUS_s, SERVICE_REPLICATION_STATUS_s, SERVICE_REPLICATION_STATUS_DETAILS_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s\n;\nlet table_replicationmodesbyservice = table_hsrlastpost\n| summarize last_post = max(TimeGenerated) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s, REPLICATION_MODE_s, OPERATION_MODE_s\n;\nlet table_lastreplicationpostbyhost = table_lastreplicationpostbyservice\n| join (table_maxreplicationpostbyservice)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SITE_NAME_s == $right.SITE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n| summarize last_post = max(last_post), max_time_diff_seconds = max(max_time_diff_seconds), max_async_buff_used_mb = sum(max_async_buff_used_mb) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SECONDARY_SITE_NAME_s\n;\nlet table_lastreplicationbystatusbyhost = table_lastreplicationbystatusbyservice\n| summarize last_post = max(last_post) by DATABASE_NAME_s, SYSTEM_REPLICATION_STATUS_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s\n;\nlet table_replicationmodesbyhost = table_replicationmodesbyservice\n| summarize last_post = max(last_post) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, REPLICATION_MODE_s, OPERATION_MODE_s\n;\nlet table_lastreplicationbystatusbydb = table_lastreplicationbystatusbyhost\n| top-nested of DATABASE_NAME_s by min(1), top-nested 1 of SYSTEM_REPLICATION_STATUS_s by last_post = max(last_post) desc\n;\nlet table_lastreplicationpostbydb = table_lastreplicationpostbyhost\n| summarize last_post = max(last_post) by DATABASE_NAME_s\n;\nlet table_databasesummary = table_lastreplicationpostbydb\n| join (table_lastreplicationbystatusbydb)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n| extend id = DATABASE_NAME_s,\n         parent_id = '',\n         replication_item = DATABASE_NAME_s,\n         site = '',\n         system_replication_status = SYSTEM_REPLICATION_STATUS_s,\n         system_replication_status_details = '',\n         replication_mode = '',\n         source_host = '',\n         target_host = '',\n         source_site = '',\n         target_site = '',\n         service_name = '',\n         tenant = DATABASE_NAME_s\n| project id,\n          parent_id,\n          replication_item,\n          site,\n          system_replication_status,\n          system_replication_status_details,\n          replication_mode,\n          source_host,\n          target_host,\n          source_site,\n          target_site,\n          service_name,\n          tenant\n;\nlet table_hostsummary = table_lastreplicationpostbyhost\n| join (table_lastreplicationbystatusbyhost)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_replicationmodesbyhost)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_replicationmetricsbydb)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_tsreplicationtimediffbyhost)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_tsreplicationasyncbuffbyhost)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| extend id = strcat(DATABASE_NAME_s, \".\", HOST_s, \".\", SECONDARY_HOST_s),\n         parent_id = DATABASE_NAME_s,\n         replication_item = strcat(HOST_s, \" -> \", SECONDARY_HOST_s),\n         site = strcat(SITE_NAME_s, \" -> \", SECONDARY_SITE_NAME_s),\n         system_replication_status = SYSTEM_REPLICATION_STATUS_s,\n         system_replication_status_details = '',\n         replication_mode = strcat(REPLICATION_MODE_s, \" (\", OPERATION_MODE_s, \")\"),\n         ts_time_diff_seconds = ts_max_time_diff_seconds,\n         // async_buff_string = strcat(format_bytes((async_buff_used_mb * 1024 * 1024), 2), \" (\", format_bytes((max_async_buff_used_mb * 1024 * 1024), 2), \")\"),\n         async_buff_used_mb,\n         max_async_buff_used_mb,\n         ts_async_buff_mb = ts_max_async_buff_mb,\n         source_host = HOST_s,\n         target_host = SECONDARY_HOST_s,\n         source_site = SITE_NAME_s,\n         target_site = SECONDARY_SITE_NAME_s,\n         service_name = '',\n         tenant = DATABASE_NAME_s\n| project id,\n          parent_id,\n          replication_item,\n          site,\n          system_replication_status,\n          replication_mode,\n          time_diff_seconds,\n          max_time_diff_seconds,\n          ts_time_diff_seconds,\n          // async_buff_string,\n          async_buff_used_mb,\n          max_async_buff_used_mb,\n          ts_async_buff_mb,\n          source_host,\n          target_host,\n          source_site,\n          target_site,\n          service_name,\n          tenant\n;\nlet table_servicesummary = table_lastreplicationpostbyservice\n| join (table_maxreplicationpostbyservice)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SITE_NAME_s == $right.SITE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n| join (table_lastreplicationbystatusbyservice)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_replicationmodesbyservice)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_replicationmetricsbyservice)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_tsreplicationtimediffbyservice)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_tsreplicationasyncbuffbyservice)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| extend id = strcat(DATABASE_NAME_s, \".\", HOST_s, \".\", SECONDARY_HOST_s, \".\", SERVICE_NAME_s),\n         parent_id = strcat(DATABASE_NAME_s, \".\", HOST_s, \".\", SECONDARY_HOST_s),\n         replication_item = SERVICE_NAME_s,\n         site = strcat(SITE_NAME_s, \" -> \", SECONDARY_SITE_NAME_s),\n         system_replication_status = SERVICE_REPLICATION_STATUS_s,\n         system_replication_status_details = SERVICE_REPLICATION_STATUS_DETAILS_s,\n         shipped_log_position_time = SHIPPED_LOG_POSITION_TIME_t,\n         replayed_log_position_time = REPLAYED_LOG_POSITION_TIME_t,\n         replication_mode = strcat(REPLICATION_MODE_s, \" (\", OPERATION_MODE_s, \")\"),\n         ts_time_diff_seconds = ts_max_time_diff_seconds,\n         // async_buff_string = strcat(format_bytes((async_buff_used_mb * 1024 * 1024), 2), \" (\", format_bytes((max_async_buff_used_mb * 1024 * 1024), 2), \")\"),\n         async_buff_used_mb,\n         max_async_buff_used_mb,\n         ts_async_buff_mb = ts_max_async_buff_mb,\n         source_host = HOST_s,\n         target_host = SECONDARY_HOST_s,\n         source_site = SITE_NAME_s,\n         target_site = SECONDARY_SITE_NAME_s,\n         service_name = SERVICE_NAME_s,\n         tenant = DATABASE_NAME_s\n| project id,\n          parent_id,\n          replication_item,\n          site,\n          system_replication_status,\n          system_replication_status_details,\n          shipped_log_position_time,\n          replayed_log_position_time,\n          replication_mode,\n          time_diff_seconds,\n          max_time_diff_seconds,\n          ts_time_diff_seconds,\n          // async_buff_string,\n          async_buff_used_mb,\n          max_async_buff_used_mb,\n          ts_async_buff_mb,\n          source_host,\n          target_host,\n          source_site,\n          target_site,\n          service_name,\n          tenant\n;\ntable_servicesummary\n| union (table_hostsummary)\n| union (table_databasesummary)\n",
                          "size": 3,
                          "title": "Replication Summary ",
                          "noDataMessage": "System Replication does not appear to be configured on this instance.",
                          "exportedParameters": [
                            {
                              "fieldName": "source_host",
                              "parameterName": "param_source_host",
                              "parameterType": 1
                            },
                            {
                              "fieldName": "target_host",
                              "parameterName": "param_target_host",
                              "parameterType": 1
                            },
                            {
                              "fieldName": "source_site",
                              "parameterName": "param_source_site",
                              "parameterType": 1
                            },
                            {
                              "fieldName": "target_site",
                              "parameterName": "param_target_site",
                              "parameterType": 1
                            },
                            {
                              "fieldName": "tenant",
                              "parameterName": "param_tenant",
                              "parameterType": 1
                            },
                            {
                              "fieldName": "service_name",
                              "parameterName": "param_service_name",
                              "parameterType": 1
                            }
                          ],
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "id",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "parent_id",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "system_replication_status",
                                "formatter": 18,
                                "formatOptions": {
                                  "linkColumn": "system_replication_status_details",
                                  "linkTarget": "GenericDetails",
                                  "linkIsContextBlade": true,
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "ACTIVE",
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "error",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "system_replication_status_details",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "shipped_log_position_time",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "replayed_log_position_time",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "time_diff_seconds",
                                "formatter": 1,
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "minimumIntegerDigits": 1,
                                    "minimumFractionDigits": 0,
                                    "maximumFractionDigits": 0
                                  }
                                }
                              },
                              {
                                "columnMatch": "ts_time_diff_seconds",
                                "formatter": 21,
                                "formatOptions": {
                                  "palette": "blue",
                                  "aggregation": "Max"
                                },
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "minimumIntegerDigits": 1,
                                    "minimumFractionDigits": 0,
                                    "maximumFractionDigits": 0
                                  }
                                }
                              },
                              {
                                "columnMatch": "async_buff_used_mb",
                                "formatter": 1,
                                "numberFormat": {
                                  "unit": 4,
                                  "options": {
                                    "style": "decimal",
                                    "minimumIntegerDigits": 1,
                                    "maximumFractionDigits": 1
                                  }
                                }
                              },
                              {
                                "columnMatch": "max_async_buff_used_mb",
                                "formatter": 0,
                                "numberFormat": {
                                  "unit": 4,
                                  "options": {
                                    "style": "decimal",
                                    "minimumIntegerDigits": 1,
                                    "maximumFractionDigits": 1
                                  }
                                }
                              },
                              {
                                "columnMatch": "ts_async_buff_mb",
                                "formatter": 21,
                                "formatOptions": {
                                  "palette": "blue",
                                  "aggregation": "Max"
                                },
                                "numberFormat": {
                                  "unit": 4,
                                  "options": {
                                    "style": "decimal"
                                  }
                                }
                              },
                              {
                                "columnMatch": "source_host",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "target_host",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "source_site",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "target_site",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "service_name",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "tenant",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Async buffer",
                                "formatter": 1,
                                "numberFormat": {
                                  "unit": 4,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false
                                  }
                                }
                              }
                            ],
                            "hierarchySettings": {
                              "idColumn": "id",
                              "parentColumn": "parent_id",
                              "treeType": 0,
                              "expanderColumn": "replication_item",
                              "expandTopLevel": true
                            },
                            "labelSettings": [
                              {
                                "columnId": "id"
                              },
                              {
                                "columnId": "parent_id"
                              },
                              {
                                "columnId": "replication_item",
                                "label": "Item"
                              },
                              {
                                "columnId": "site",
                                "label": "Site"
                              },
                              {
                                "columnId": "system_replication_status",
                                "label": "Status"
                              },
                              {
                                "columnId": "system_replication_status_details",
                                "label": "Status details"
                              },
                              {
                                "columnId": "shipped_log_position_time"
                              },
                              {
                                "columnId": "replayed_log_position_time"
                              },
                              {
                                "columnId": "replication_mode",
                                "label": "Mode"
                              },
                              {
                                "columnId": "time_diff_seconds",
                                "label": "Time diff"
                              },
                              {
                                "columnId": "max_time_diff_seconds",
                                "label": "(Max)"
                              },
                              {
                                "columnId": "ts_time_diff_seconds",
                                "label": "Time diff over timeframe"
                              },
                              {
                                "columnId": "async_buff_used_mb",
                                "label": "Async buffer"
                              },
                              {
                                "columnId": "max_async_buff_used_mb",
                                "label": "(Max)"
                              },
                              {
                                "columnId": "ts_async_buff_mb",
                                "label": " Async buffer over timeframe"
                              },
                              {
                                "columnId": "source_host"
                              },
                              {
                                "columnId": "target_host"
                              },
                              {
                                "columnId": "source_site"
                              },
                              {
                                "columnId": "target_site"
                              },
                              {
                                "columnId": "service_name"
                              },
                              {
                                "columnId": "tenant"
                              }
                            ]
                          },
                          "sortBy": []
                        },
                        "name": "query_replication_summary"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let param_sid = \"{param_sid}\"\r\n;\r\nlet param_tenant = \"{param_tenant}\"\r\n;\r\nlet param_target_host = \"{param_target_host}\"\r\n;\r\nlet param_source_host = \"{param_source_host}\"\r\n;\r\nlet param_service_name = \"{param_service_name}\"\r\n;\r\nlet table_systemreplication = SapHana_SystemReplication_CL\r\n| where SYSTEM_ID_s == param_sid\r\n| where TimeGenerated {param_timeframe}\r\n;\r\nlet table_hsrwithrownumbers = table_systemreplication\r\n| where DATABASE_NAME_s == param_tenant\r\n| where SECONDARY_HOST_s == param_target_host or isempty(param_target_host)\r\n| where HOST_s == param_source_host or isempty(param_source_host)\r\n| where SERVICE_NAME_s == param_service_name or isempty(param_service_name)\r\n| project TimeGenerated, \r\n          DATABASE_NAME_s, \r\n          HOST_s, \r\n          SECONDARY_HOST_s, \r\n          SERVICE_NAME_s, \r\n          TOTAL_TRIGGER_ASYNC_WRITES_d, \r\n          TOTAL_WRITE_TIME_d, \r\n          SHIPPED_LOG_BUFFERS_DURATION_d, \r\n          SHIPPED_LOG_BUFFERS_COUNT_d\r\n| order by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SERVICE_NAME_s, TimeGenerated  desc\r\n| extend RecordNumber = row_number(), PrevRecordNumber = row_number() -1\r\n;\r\n// The local buffer entrys are by localhost and service, so averaging by host and service will remove the duplicate values (important when we select by db or host)\r\nlet table_localbuffer = table_hsrwithrownumbers\r\n| join (table_hsrwithrownumbers) \r\n  on $left.RecordNumber == $right.PrevRecordNumber,\r\n     $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\r\n| summarize \r\n   TRIGGER_ASYNC_WRITES = avg(TOTAL_TRIGGER_ASYNC_WRITES_d - TOTAL_TRIGGER_ASYNC_WRITES_d1),\r\n   WRITE_TIME = avg(TOTAL_WRITE_TIME_d - TOTAL_WRITE_TIME_d1)\r\n  by  \r\n   TimeGenerated, \r\n   DATABASE_NAME_s, \r\n   HOST_s,\r\n   SERVICE_NAME_s   \r\n|summarize\r\n  Avg_local_log_buffer_write_time_ms = avg(WRITE_TIME / TRIGGER_ASYNC_WRITES / 1000)\r\n by bin(TimeGenerated, {param_timeframe:grain})\r\n;\r\n\r\nlet table_shipped_buffers = table_hsrwithrownumbers\r\n| join (table_hsrwithrownumbers) \r\n  on $left.RecordNumber == $right.PrevRecordNumber,\r\n     $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\r\n| summarize \r\n       Avg_log_buffer_shipping_time_ms = sum(SHIPPED_LOG_BUFFERS_DURATION_d - SHIPPED_LOG_BUFFERS_DURATION_d1) / 1000 / sum(SHIPPED_LOG_BUFFERS_COUNT_d - SHIPPED_LOG_BUFFERS_COUNT_d1)\r\n  by bin(TimeGenerated, {param_timeframe:grain})\r\n;\r\n\r\ntable_shipped_buffers\r\n| join (table_localbuffer)\r\n  on $left.TimeGenerated == $right.TimeGenerated\r\n|project-away TimeGenerated1",
                                "size": 0,
                                "aggregation": 2,
                                "title": "Log buffer write time vs. shipping time",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "linechart",
                                "chartSettings": {
                                  "xAxis": "TimeGenerated",
                                  "yAxis": [
                                    "Avg_local_log_buffer_write_time_ms",
                                    "Avg_log_buffer_shipping_time_ms"
                                  ],
                                  "showLegend": true,
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "Avg_local_log_buffer_write_time_ms",
                                      "label": "Avg. local log buffer write time (ms)"
                                    },
                                    {
                                      "seriesName": "Avg_log_buffer_shipping_time_ms",
                                      "label": "Avg. log buffer shipping time (ms)",
                                      "color": "green"
                                    },
                                    {
                                      "color": "purple"
                                    }
                                  ],
                                  "ySettings": {
                                    "numberFormatSettings": {
                                      "unit": 23,
                                      "options": {
                                        "style": "decimal",
                                        "useGrouping": true
                                      }
                                    }
                                  }
                                }
                              },
                              "customWidth": "50",
                              "name": "query_logbufferwritevsshipping"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nlet param_target_host = \"{param_target_host}\"\n;\nlet param_source_host = \"{param_source_host}\"\n;\nlet param_service_name = \"{param_service_name}\"\n;\nlet table_systemreplication = SapHana_SystemReplication_CL\n| where SYSTEM_ID_s == param_sid\n| where TimeGenerated {param_timeframe}\n;\nlet table_hsrwithrownumbers = table_systemreplication\n| where DATABASE_NAME_s == param_tenant\n| where SECONDARY_HOST_s == param_target_host or isempty(param_target_host)\n| where HOST_s == param_source_host or isempty(param_source_host)\n| where SERVICE_NAME_s == param_service_name or isempty(param_service_name)\n| project TimeGenerated, \n          DATABASE_NAME_s, \n          HOST_s, \n          SECONDARY_HOST_s, \n          SERVICE_NAME_s, \n          SHIPPED_LOG_BUFFERS_SIZE_d, \n          SHIPPED_LOG_BUFFERS_DURATION_d,\n          TOTAL_WRITE_SIZE_d,\n          TOTAL_WRITE_TIME_d\n| order by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SERVICE_NAME_s, TimeGenerated  desc\n| extend RecordNumber = row_number(), PrevRecordNumber = row_number() -1\n;\n// The local buffer entries are by localhost and service, so averaging by host and service will remove the duplicate values (important when we select by db or host)\nlet table_localbuffer = table_hsrwithrownumbers\n| join (table_hsrwithrownumbers) \n  on $left.RecordNumber == $right.PrevRecordNumber,\n     $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n| summarize \n   WRITE_SIZE = avg(TOTAL_WRITE_SIZE_d - TOTAL_WRITE_SIZE_d1),\n   WRITE_TIME = avg(TOTAL_WRITE_TIME_d - TOTAL_WRITE_TIME_d1)\n  by  \n   TimeGenerated, \n   DATABASE_NAME_s, \n   HOST_s,\n   SERVICE_NAME_s   \n|summarize\n  Avg_local_log_buffer_troughput_mbps = avg((WRITE_SIZE  / 1024 / 1024) / (WRITE_TIME / 1000 / 1000)) \nby bin(TimeGenerated, {param_timeframe:grain})\n;\n\nlet table_shipped_buffers = table_hsrwithrownumbers\n| join (table_hsrwithrownumbers) \n  on $left.RecordNumber == $right.PrevRecordNumber,\n     $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n| summarize \n       Avg_log_buffer_shipping_throughput_mbps = avg(((SHIPPED_LOG_BUFFERS_SIZE_d - SHIPPED_LOG_BUFFERS_SIZE_d1) / 1024 / 1024) / ((SHIPPED_LOG_BUFFERS_DURATION_d - SHIPPED_LOG_BUFFERS_DURATION_d1)/ 1000 / 1000))\n  by bin(TimeGenerated, {param_timeframe:grain})\n;\n\ntable_shipped_buffers\n| join (table_localbuffer)\n  on $left.TimeGenerated == $right.TimeGenerated\n|project-away TimeGenerated1",
                                "size": 0,
                                "aggregation": 2,
                                "title": "Log buffer write throughput vs. shipping throughput",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "linechart",
                                "chartSettings": {
                                  "xAxis": "TimeGenerated",
                                  "yAxis": [
                                    "Avg_log_buffer_shipping_throughput_mbps",
                                    "Avg_local_log_buffer_troughput_mbps"
                                  ],
                                  "showLegend": true,
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "Avg_local_log_buffer_troughput_mbps",
                                      "color": "blue"
                                    },
                                    {
                                      "seriesName": "Avg_log_buffer_shipping_throughput_mbps",
                                      "color": "green"
                                    }
                                  ],
                                  "ySettings": {
                                    "numberFormatSettings": {
                                      "unit": 47,
                                      "options": {
                                        "style": "decimal",
                                        "useGrouping": true
                                      }
                                    },
                                    "min": 0
                                  }
                                }
                              },
                              "customWidth": "50",
                              "name": "query_logbufferwritethroughputvsshipthroughput"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "// let numberOfBuckets = 10\n// ;\nlet param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nlet param_target_host = \"{param_target_host}\"\n;\nlet param_source_host = \"{param_source_host}\"\n;\nlet param_service_name = \"{param_service_name}\"\n;\nlet table_systemreplication = SapHana_SystemReplication_CL\n| where SYSTEM_ID_s == param_sid\n| where TimeGenerated {param_timeframe}\n;\n// let interval = toscalar(table_systemreplication\n// | summarize interval = (max(TimeGenerated)-min(TimeGenerated)) / numberOfBuckets\n// | project floor(interval, 1m))\n// ;\ntable_systemreplication\n| where DATABASE_NAME_s == param_tenant\n| where SECONDARY_HOST_s == param_target_host or isempty(param_target_host)\n| where HOST_s == param_source_host or isempty(param_source_host)\n| where SERVICE_NAME_s == param_service_name or isempty(param_service_name)\n| summarize \n  Max_seconds_behind_master = max(TIME_DIFF_SECONDS_d)\n  by bin(TimeGenerated, {param_timeframe:grain})\n",
                                "size": 0,
                                "aggregation": 2,
                                "title": "Time behind master",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "areachart",
                                "chartSettings": {
                                  "yAxis": [
                                    "Max_seconds_behind_master"
                                  ],
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "Max_seconds_behind_master",
                                      "label": "Seconds behind master"
                                    }
                                  ],
                                  "ySettings": {
                                    "numberFormatSettings": {
                                      "unit": 24,
                                      "options": {
                                        "style": "decimal",
                                        "useGrouping": true
                                      }
                                    }
                                  }
                                }
                              },
                              "customWidth": "50",
                              "name": "query_secondsbehindmaster",
                              "styleSettings": {
                                "margin": "1%"
                              }
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "// let numberOfBuckets = 10\n// ;\nlet param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nlet param_target_host = \"{param_target_host}\"\n;\nlet param_source_host = \"{param_source_host}\"\n;\nlet param_service_name = \"{param_service_name}\"\n;\nlet table_systemreplication = SapHana_SystemReplication_CL\n| where SYSTEM_ID_s == param_sid\n| where TimeGenerated {param_timeframe}\n;\n// let interval = toscalar(table_systemreplication\n// | summarize interval = (max(TimeGenerated)-min(TimeGenerated)) / numberOfBuckets\n// | project floor(interval, 1m))\n// ;\ntable_systemreplication\n| where DATABASE_NAME_s == param_tenant\n| where SECONDARY_HOST_s == param_target_host or isempty(param_target_host)\n| where HOST_s == param_source_host or isempty(param_source_host)\n| where SERVICE_NAME_s == param_service_name or isempty(param_service_name)\n| summarize \n  Max_async_buff_used_mb = max(ASYNC_BUFF_USED_MB_d)\n  by bin(TimeGenerated, {param_timeframe:grain})\n",
                                "size": 0,
                                "aggregation": 2,
                                "title": "Async buffer used",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "areachart",
                                "chartSettings": {
                                  "yAxis": [
                                    "Max_async_buff_used_mb"
                                  ],
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "Max_seconds_behind_master",
                                      "label": "Seconds behind master"
                                    }
                                  ],
                                  "ySettings": {
                                    "numberFormatSettings": {
                                      "unit": 4,
                                      "options": {
                                        "style": "decimal",
                                        "useGrouping": true
                                      }
                                    }
                                  }
                                }
                              },
                              "customWidth": "50",
                              "name": "query_asyncbuffer",
                              "styleSettings": {
                                "margin": "1%"
                              }
                            }
                          ]
                        },
                        "conditionalVisibility": {
                          "parameterName": "param_tenant",
                          "comparison": "isNotEqualTo"
                        },
                        "name": "replication_graphs"
                      }
                    ]
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "param_tab_main",
                      "comparison": "isEqualTo",
                      "value": "4"
                    },
                    {
                      "parameterName": "param_sid",
                      "comparison": "isNotEqualTo",
                      "value": "*"
                    },
                    {
                      "parameterName": "param_check_hsrdata",
                      "comparison": "isEqualTo",
                      "value": "0"
                    }
                  ],
                  "name": "group_replication_content"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "param_tab_main",
              "comparison": "isEqualTo",
              "value": "4"
            },
            "name": "group_replication"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "param_sid",
        "comparison": "isNotEqualTo",
        "value": "*"
      },
      "name": "group_details"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
